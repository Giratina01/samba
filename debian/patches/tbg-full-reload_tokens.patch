--- samba-3.6.9/source3/Makefile.in	2012-10-29 02:05:46.000000000 -0700
+++ tbg-samba-3.6.9/source3/Makefile.in	2013-08-09 06:26:16.496640009 -0700
@@ -923,6 +923,7 @@
 	       smbd/smb2_setinfo.o \
 	       smbd/smb2_break.o \
 	       ../libcli/smb/smb2_create_blob.o \
+	       auth/auth_reload.o \
 	       $(MANGLE_OBJ) @VFS_STATIC@
 
 SMBD_OBJ_BASE = $(PARAM_WITHOUT_REG_OBJ) $(SMBD_OBJ_SRV) $(LIBSMB_OBJ) \
--- samba-3.6.9/source3/auth/auth_reload.c	1969-12-31 16:00:00.000000000 -0800
+++ tbg-samba-3.6.9/source3/auth/auth_reload.c	2013-08-10 21:31:16.281709654 -0700
@@ -0,0 +1,313 @@
+/*
+   Unix SMB/CIFS implementation.
+   Token Reload functions
+   Copyright (C) Richard Sharpe 2013
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "includes.h"
+#include "auth.h"
+#include "../libcli/auth/libcli_auth.h"
+#include "../libcli/security/security.h"
+#include "../lib/util/util_pw.h"
+#include "passdb.h"
+#include "smbd/globals.h"
+#include "smbd/proto.h"
+
+#undef DBGC_CLASS
+#define DBGC_CLASS DBGC_AUTH
+
+/*
+ * We need to get the groups this user is in directly from the DC because
+ * winbindd caches stuff. We use rpcclient initially for this.
+ */
+bool get_group_sids(const void *ctx,
+		    struct dom_sid *user_sid, 
+		    int *ngroups, 
+		    struct dom_sid **groups)
+{
+	char *command = NULL;
+	uint32_t user_rid = 0;
+	int fd = 0, i;
+	int res = 0;
+	int numlines;
+	char **qlines;
+	struct dom_sid *tmp_groups;
+	struct dom_sid tmp_sid;
+
+	if (!user_sid->num_auths) {
+		DEBUG(10, ("Invalid SID passed ... \n"));
+		return false;
+	}
+
+	user_rid = user_sid->sub_auths[user_sid->num_auths - 1];
+
+	command = talloc_asprintf(talloc_tos(), 
+				"/usr/bin/rpcclient -d0 -P %s -c 'queryusergroups %u'",
+				lp_realm(),
+				user_rid);
+	if (!command) {
+		DEBUG(10, ("No memory for command\n"));
+		return false;
+	}
+
+	DEBUG(10, ("Running command [%s]\n", command));
+
+	res = smbrun_no_sanitize(command, &fd);
+	if (res != 0) {
+		DEBUG(10, ("Error running command: %s\n", command));
+		return false;
+	}
+
+	/* Use command as the context */
+	qlines = fd_lines_load(fd, &numlines, 0, command);
+
+	DEBUG(10, ("Number of lines: %u\n", numlines));
+	tmp_groups = talloc_array(ctx, struct dom_sid, numlines);
+	sid_copy(&tmp_sid, user_sid);
+	for (i = numlines; i > 0 ; i--) {
+		unsigned int rid = 0;
+		char *rid_str = strchr(qlines[i - 1], '[');
+		DEBUG(10, ("Line %i is %s\n", i, qlines[i - 1]));
+		/* Extract the RID from the line ... */
+		if (sscanf(rid_str + 1, "%x", &rid) <= 0) {
+			DEBUG(10, ("Problems in sscanf for index %d\n", i));
+			continue;
+		}
+		DEBUG(10, ("Rid is %u\n", rid));
+		/*
+		 * We assume that the SIDs are all in the same domain!
+		 */
+		tmp_sid.sub_auths[tmp_sid.num_auths - 1] = rid;
+		sid_copy(&tmp_groups[numlines - i], &tmp_sid);
+	}
+
+	close(fd);
+	TALLOC_FREE(command);
+
+	*ngroups = numlines;
+	*groups = tmp_groups;
+
+	return true;
+}
+
+/*
+ * Reload a user ... this re-initializes a user by re-creating their token
+ */
+bool reload_user(user_struct *user)
+{
+	int i = 0;
+	NTSTATUS res;
+	struct security_unix_token *utok = NULL;
+	struct security_token *token = NULL;
+	char *username = NULL;
+	struct dom_sid tmp_sid;
+	int ngroups = 0;
+	struct dom_sid *groups;
+
+	if (!user || !user->session_info) {
+		DEBUG(10, ("Null user or no session info. Nothing to do\n"));
+		return True;
+	}
+
+	/*
+	 * We need a new token for this user. The token is embedded in the
+	 * session info struct. The UID & GID and username will not change
+	 * but we need to supply these args.
+	 */
+	utok = &(user->session_info->utok);
+
+	security_token_debug(DBGC_AUTH,
+			     10,
+			     user->session_info->security_token);
+	debug_unix_user_token(DBGC_AUTH, 10,
+			      utok->uid,
+			      utok->gid,
+			      utok->ngroups,
+			      utok->groups);
+
+	if (!get_group_sids(user->session_info,
+				&user->session_info->security_token->sids[0],
+				&ngroups,
+				&groups)) {
+		DEBUG(10, ("Failed to get groups ...\n"));
+	}
+
+	DEBUG(10, ("Groups = %u\n", ngroups));
+
+	/*
+	 * It is not clear we need to initgroups, especially since it
+	 * will change the groups in play and we might screw up any
+	 * change to user change back to root pair.
+	 */
+
+	token = create_local_nt_token(user->session_info,
+				&user->session_info->security_token->sids[0],
+				user->session_info->guest,
+				ngroups,
+				groups);
+
+	if (!token) {
+		DEBUG(10, ("Unable to create token for [%s]: ENOMEM. Skipping.\n",
+			user->session_info->unix_name));
+		return False;
+	}
+
+	TALLOC_FREE(username); /* Don't need this ... */
+
+	/*
+	 * Now free the groups array because we reset it below
+	 */
+	utok->ngroups = 0;
+	TALLOC_FREE(utok->groups);  /* Does nothing if already NULL */
+	utok->groups = NULL;
+
+	/*
+	 * Now, add the UNIX groups, because we deleted all groups above.
+	 * We do this first because getgroups_unix_user overwrites groups.
+	 */
+	getgroups_unix_user(user->session_info,
+			    user->session_info->unix_name,
+			    utok->gid,
+			    &utok->groups,
+			    &utok->ngroups);
+
+	/*
+	 * Now convert SIDs to groups as well. SID 0 is our user SID, so start
+	 * at SID 1 since it is the first group SID.
+	 */
+	for (i = 1; i < token->num_sids; i++) {
+		gid_t gid = -1;
+
+		if (!sid_to_gid(&token->sids[i], &gid)) {
+			/* Really want to see this if debug level not zero */
+			DEBUG(1, ("Could not convert SID %s to gid, ignoring it\n",
+				sid_string_dbg(&token->sids[i])));
+			continue;
+		}
+
+		DEBUG(10, ("Converted SID %s to %u\n", sid_string_dbg(&token->sids[i]), gid));
+
+		add_gid_to_array_unique(user->session_info, 
+					gid,
+					&utok->groups,
+					&utok->ngroups);
+	}
+
+	/*
+	 * Now, mimic the behavior of create_local_token by adding in SIDs 
+	 * that map from the gids.
+	 */
+	uid_to_unix_users_sid(utok->uid, &tmp_sid);
+	add_sid_to_array_unique(token, 
+				&tmp_sid, 
+				&token->sids, 
+				&token->num_sids);
+
+	for (i = 0; i < utok->ngroups; i++) {
+		gid_to_unix_groups_sid(utok->groups[i], &tmp_sid);
+		add_sid_to_array_unique(token, 
+				&tmp_sid,
+				&token->sids,
+				&token->num_sids);
+	}
+
+	/*
+	 * Free the existing token and install the new one
+	 */
+	TALLOC_FREE(user->session_info->security_token);
+	user->session_info->security_token = token;
+
+	/*
+	 * Provide some debugging info ...
+	 */
+	security_token_debug(DBGC_AUTH,
+			     10,
+			     user->session_info->security_token);
+	debug_unix_user_token(DBGC_AUTH, 10,
+			      utok->uid,
+			      utok->gid,
+			      utok->ngroups,
+			      utok->groups);
+
+	/*
+	 * If logging of nt tokens has been defined, let's do that as well.
+	 */
+	res = log_nt_token(user->session_info->security_token);
+	if (!NT_STATUS_IS_OK(res)) {
+		DEBUG(0, ("Error logging nt token, ignoring: %s\n",
+			nt_errstr(res)));
+	}
+	
+	return True;
+}
+
+/*
+ * Reload all tokens. We need to reload the tokens for all authenticated users
+ * and then copy these tokens into the SMB1 tcons, if any.
+ *
+ * There is only one TCP Connection, so we can only be using SMB1 or SMB2. 
+ * For SMB2 the picture is a little simpler because there are no copies of
+ * the user_auth structure elsewhere.
+ *
+ * We pick up the list of 'validated users' etc from smbd_server_conn;
+ *
+ * We take the attitude here that already open files will remain open even
+ * if the token we load would have precluded them from opening that file. This
+ * is because Windows apps will likely be unhappy if files they believed they
+ * were open suddenly turned out to be closed.
+ */
+extern struct smbd_server_connection *smbd_server_conn;
+void reload_tokens(void)
+{
+	struct smbd_server_connection *srv_conn = smbd_server_conn;
+	user_struct *user = NULL;
+
+	DEBUG(10, ("Reloading tokens for all validated users\n"));
+	/*
+	 * A user validated via SMB2 shows up in smb1.sessions.validated users
+	 */
+	for (user = srv_conn->smb1.sessions.validated_users; 
+		user;
+		user = user->next) {
+		(void)reload_user(user);
+	}
+
+	/*
+	 * Now take care of those tokens copied to TCON structures in
+	 * SMB1 cases ...
+	 */
+	if (!srv_conn->using_smb2) {
+		connection_struct *conn;
+
+		DEBUG(10, ("Copying tokens into TCON connect structs for SMB1\n"));
+		for (conn = srv_conn->smb1.tcons.Connections;
+			conn;
+			conn = conn->next) {
+			user = get_valid_user_struct(srv_conn, conn->vuid);
+
+			if (!user->session_info) {
+				DEBUG(10, ("No session info for vuid %u, "
+					"ignoring!\n", conn->vuid));
+				continue;
+			}
+
+			TALLOC_FREE(conn->session_info->security_token);
+			conn->session_info->security_token = 
+				dup_nt_token(conn,
+					user->session_info->security_token);
+		}
+	}
+}
--- samba-3.6.9/source3/auth/proto.h	2012-10-29 02:05:46.000000000 -0700
+++ tbg-samba-3.6.9/source3/auth/proto.h	2013-08-09 06:36:21.602088044 -0700
@@ -131,6 +131,7 @@
                                       const char *smb_name,
                                       const char *client_domain,
                                       DATA_BLOB lm_resp, DATA_BLOB nt_resp);
+NTSTATUS log_nt_token(struct security_token *token);
 bool make_user_info_guest(struct auth_usersupplied_info **user_info) ;
 struct samu;
 NTSTATUS make_server_info_sam(struct auth_serversupplied_info **server_info,
--- samba-3.6.9/source3/auth/auth_util.c	2012-10-29 02:05:46.000000000 -0700
+++ tbg-samba-3.6.9/source3/auth/auth_util.c	2013-08-11 09:49:39.970440565 -0700
@@ -395,7 +395,7 @@
 	return NT_STATUS_IS_OK(nt_status) ? True : False;
 }
 
-static NTSTATUS log_nt_token(struct security_token *token)
+NTSTATUS log_nt_token(struct security_token *token)
 {
 	TALLOC_CTX *frame = talloc_stackframe();
 	char *command;
